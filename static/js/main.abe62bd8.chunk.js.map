{"version":3,"sources":["components/Card.js","components/CardList.js","components/Searchbox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","id","className","src","alt","CardList","robots","map","user","i","key","Searchbox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oNAqBeA,MAnBf,SAAcC,GAAQ,IACVC,EAAgBD,EAAhBC,KAAMC,EAAUF,EAAVE,MAAMC,EAAIH,EAAJG,GAEpB,OAGI,yBAAKC,UAAU,oDAGX,yBAAKC,IAAG,+BAA2BF,EAA3B,YAA0CG,IAAI,WACtD,6BACI,4BAAKL,GACL,2BAAIC,MCALK,MAXf,YAA4B,IAATC,EAAQ,EAARA,OAEf,OACI,6BAEIA,EAAOC,KAAI,SAACC,EAAMC,GACd,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGR,GAAIK,EAAOG,GAAGR,GAAIF,KAAMO,EAAOG,GAAGV,KAAMC,MAAOM,EAAOG,GAAGT,aCE/EW,MATf,YAAoC,IAAhBC,EAAe,EAAfA,aAChB,OACC,yBAAKV,UAAU,OACZ,2BAAOA,UAAU,mCAAmCW,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,MCMjGI,MATf,SAAgBlB,GACZ,OACI,yBAAKmB,MAAO,CAACC,UAAU,SAASC,OAAO,kBAAkBC,OAAO,UAE3DtB,EAAMuB,WCkBJC,E,kDArBX,WAAYxB,GAAO,IAAD,8BACd,cAAMA,IACDyB,MAAM,CACPC,UAAS,GAHC,E,8DAMAC,EAAMC,GACpBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAIxB,OAAGG,KAAKJ,MAAMC,SACH,+CAGAG,KAAK7B,MAAMuB,a,GAhBHQ,aCuDZC,E,kDA7Cf,aAAc,IAAD,8BACX,gBAaAC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAb7C,EAAKZ,MAAQ,CACXjB,OAAQ,GACR2B,YAAa,IAJJ,E,gEASO,IAAD,OACjBG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAE,EAAKZ,SAAS,CAACtB,OAAQkC,S,+BAO3B,IAAD,EACqBb,KAAKJ,MAAzBjB,EADD,EACCA,OAAO2B,EADR,EACQA,YACRQ,EAAiBnC,EAAOoC,QAAO,SAAAC,GACnC,OAAOA,EAAM5C,KAAK6C,cAAcC,SAASZ,EAAYW,kBAEzD,OAAsB,IAAlBtC,EAAOwC,OACF,uCAKL,yBAAK5C,UAAU,MACb,2CACA,kBAAC,EAAD,CAAWU,aAAce,KAAKI,iBAE9B,kBAAC,EAAD,KAAQ,kBAAC,EAAD,KAAc,kBAAC,EAAD,CAAUzB,OAAQmC,W,GAnC9BZ,aCCEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCRNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAGFC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLsC,QAAQtC,MAAMA,EAAMuC,a","file":"static/js/main.abe62bd8.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Card(props) {\n    const { name ,email,id}=props;\n\n    return(\n        \n        \n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            \n            \n            <img src={`https://robohash.org/${ id }?200x200`} alt='robots'></img>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n        \n    );\n    \n}\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nfunction CardList({robots}){\n   \n    return(\n        <div>\n        {\n            robots.map((user, i) => {\n                return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />})\n        }\n        </div>\n    );\n}\nexport default CardList;","import React from 'react';\n\nfunction Searchbox({searchChange}) {\n    return(\n     <div className='pa2'>   \n        <input className='pa3 ba b--green bg-lightest-blue' type='search' placeholder='search robots' onChange={searchChange} />\n        </div>\n\n    );\n    \n}\nexport default Searchbox;","import React from 'react';\n\nfunction Scroll(props) {\n    return(\n        <div style={{overflowY:'scroll',border:'5px solid black',height:'500px'}}>\n\n            {props.children}\n        </div>\n    );\n}\n\nexport default Scroll;","import React,{Component} from 'react';\n\nclass ErrorBoundry extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n            hasError:false\n        }\n    }\n    componentDidCatch(error,info){\n        this.setState({hasError:true})\n\n    }\n    render(){\n        if(this.state.hasError){\n            return <h1>Oooops.Not good</h1>\n        }\n        else{\n            return this.props.children;\n        }\n\n\n    }\n}\nexport default ErrorBoundry;","import React,{Component} from 'react';\n\nimport './App.css';\n// import { robots } from './robots';\nimport CardList from '../components/CardList';\nimport Searchbox from '../components/Searchbox';\nimport Scroll from '../components/Scroll';\n// import { render } from '@testing-library/react';\nimport ErrorBoundry from '../components/ErrorBoundry';\n\n\nclass App extends Component {\nconstructor(){\n  super()\n  this.state = {\n    robots: [],\n    searchfield: '',\n  }\n}\n\n\ncomponentDidMount(){\n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response => response.json())\n  .then(users=>this.setState({robots: users}));\n}\n  onSearchChange = (event) => {\n      this.setState({searchfield: event.target.value})\n  }\n\n \n  render(){\n    const {robots,searchfield}=this.state;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n    })\n  if (robots.length === 0) {\n    return <h1>Loading</h1>\n  }\n\n  else {\n    return (\n      <div className=\"tc\">\n        <h1>RoboFriends</h1>\n        <Searchbox searchChange={this.onSearchChange} />\n        \n        <Scroll><ErrorBoundry><CardList robots={filteredRobots} /></ErrorBoundry></Scroll>\n      </div>\n    );\n\n  }\n    \n\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './containers/index.css';\n// import Card from './Card';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport './containers/App.css'\n// import {robots} from './robots';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n   \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}